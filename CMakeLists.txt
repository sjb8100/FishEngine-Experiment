cmake_minimum_required(VERSION 3.9)
project(FishEngine_Python)
set(CMAKE_CXX_STANDARD 14)


find_package(PythonInterp 3 REQUIRED)
find_package(PythonLibs 3 REQUIRED)
IF (PYTHONLIBS_FOUND)
    message(hhhhh ${PYTHON_INCLUDE_DIR})
    INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIR})
ENDIF ()

SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_RUNTIME OFF)

FIND_PACKAGE(Boost REQUIRED COMPONENTS python3)
IF (Boost_FOUND)
    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
    message(HHHHHHHHHH ${Boost_LIBRARIES})
ENDIF ()

# glfw
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)
ADD_SUBDIRECTORY(./ThirdParty/glfw/)
include_directories(./ThirdParty/glfw/include)
SET_TARGET_PROPERTIES(glfw PROPERTIES FOLDER "ThirdParty")

if (MSVC)
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251" )
    add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
    include_directories(./ThirdParty/glew/include)
    #set(BUILD_UTILS OFF CACHE BOOL "" FORCE)
    ADD_SUBDIRECTORY(./ThirdParty/glew/build/cmake)

    # set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    # set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    # set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
    # set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
    SET_TARGET_PROPERTIES(glew PROPERTIES FOLDER "ThirdParty/glew")
    SET_TARGET_PROPERTIES(glew_s PROPERTIES FOLDER "ThirdParty/glew")
endif()



# Autodesk FBX sdk
# SET( FBXSDK_DIR "" CACHE PATH "Autodesk FBX SDK root directory" )
SET( FBXSDK_DIR "${CMAKE_CURRENT_LIST_DIR}/ThirdParty/FBX SDK/2018.1.1")
include_directories( ${FBXSDK_DIR}/include )
IF (WIN32)
    SET( FBXSDK_LIB_DIR ${FBXSDK_DIR}/lib/vs2015/x64 )
    # SET( FBXSDK_LIB_DEBUG ${FBXSDK_LIB_DIR}/debug/libfbxsdk-md.lib )
    SET( FBXSDK_LIB_RELEASE ${FBXSDK_LIB_DIR}/release/libfbxsdk-md.lib )
ELSE()
    SET( FBXSDK_LIB_DIR ${FBXSDK_DIR}/lib/clang )
    # SET( FBXSDK_LIB_DEBUG ${FBXSDK_LIB_DIR}/debug/libfbxsdk.a )
    SET( FBXSDK_LIB_RELEASE ${FBXSDK_LIB_DIR}/release/libfbxsdk.a )
ENDIF()
SET( FBXSDK_LIB ${FBXSDK_LIB_RELEASE} )

set(NANOVG_DIR "${CMAKE_CURRENT_LIST_DIR}/ThirdParty/nanovg/nanovg")
include_directories(${NANOVG_DIR}/../)
file(GLOB_RECURSE NANOVG_HEADERS ${NANOVG_DIR}/*.h)
add_library(nanovg ${NANOVG_DIR}/nanovg.c ${NANOVG_HEADERS})
set_target_properties(nanovg PROPERTIES FOLDER "ThirdParty")

macro(AutoGroup root_dir group)
    file(GLOB_RECURSE files ${root_dir}/${group}/*.hpp ${root_dir}/${group}/*.inl ${root_dir}/${group}/*.cpp)
    source_group(${group} FILES ${files})
endmacro()

include_directories(${CMAKE_CURRENT_LIST_DIR}/Include/)

file(GLOB_RECURSE HEADERS ${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine/*.hpp ${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine/*.inl)
file(GLOB_RECURSE SRCS ${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine/*.cpp)
add_library(FishEngine ${HEADERS} ${SRCS})

file(GLOB_RECURSE HEADERS ${CMAKE_CURRENT_LIST_DIR}/Include/FishEditor/*.hpp ${CMAKE_CURRENT_LIST_DIR}/Include/FishEditor/*.inl ${CMAKE_CURRENT_LIST_DIR}/Source/FishEditor/*.hpp)
file(GLOB_RECURSE SRCS ${CMAKE_CURRENT_LIST_DIR}/Source/FishEditor/*.cpp)
add_library(FishEditor ${HEADERS} ${SRCS})


# # glm
# include_directories(./ThirdParty/glm)
# #FishGUI
# SET(FishGUI_DIR ${CMAKE_CURRENT_LIST_DIR}/../../../FishGUI)
# SET(FishGUI_INCLUDE_DIR ${FishGUI_DIR}/include)
# SET(FishGUI_SRC_DIR ${FishGUI_DIR}/src)
# # aux_source_directory(${FishGUI_SRC_DIR} SRCS)
# file(GLOB_RECURSE SRCS ${FishGUI_SRC_DIR}/*.cpp)
# FILE(GLOB_RECURSE HEADERS ${FishGUI_DIR}/include/FishGUI/*.hpp)
# include_directories( ${FishGUI_INCLUDE_DIR} )
# set(FishGUI_EXTENSION_DIR ${FishGUI_DIR}/examples/common)
# include_directories(${FishGUI_EXTENSION_DIR})
# FILE(GLOB_RECURSE EXTENSIONS ${FishGUI_EXTENSION_DIR}/*.hpp ${FishGUI_EXTENSION_DIR}/*.cpp)
# source_group("extensions" FILES ${EXTENSIONS})
# add_library(FishGUI ${SRCS} ${HEADERS} ${EXTENSIONS})


add_executable(Test test.cpp)
# add_executable(Test MACOSX_BUNDLE test.cpp)
target_link_libraries(Test FishEngine)
target_link_libraries(Test FishEditor)
# target_link_libraries(Test FishGUI)
# target_link_libraries(Test FishGame)
target_link_libraries(Test nanovg)
target_link_libraries(Test glfw)
target_link_libraries(Test ${Boost_LIBRARIES})
target_link_libraries(Test ${PYTHON_LIBRARY})
target_link_libraries(Test ${FBXSDK_LIB})

SET( INFO_PLIST ${CMAKE_CURRENT_LIST_DIR}/MacOSXBundleInfo.plist.in)
IF (NOT EXISTS ${INFO_PLIST})
    MESSAGE(FATAL_ERROR "${INFO_PLIST} not found!")
ENDIF()
set_target_properties(Test PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${INFO_PLIST}" )

set_target_properties(Test PROPERTIES LINK_FLAGS "-framework OpenGL")
# target_link_libraries(Test FishEngineInternal)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine Util)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine Math)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine Render)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine Internal)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine Component)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine UI)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine System)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine Math)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine Render)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine Component)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine UI)
AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine System)
